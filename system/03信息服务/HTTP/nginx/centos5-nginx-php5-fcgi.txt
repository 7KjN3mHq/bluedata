CentOS5.2 Nginx PHP5 FastCGI 安装配置记录

安装 PHP
下载 PHP: http://www.php.net/downloads.php
下载 php-fpm: wget http://php-fpm.anight.org/downloads/head/php-5.2.6-fpm-0.5.8.diff.gz
yum -y install mysql-devel gd-devel libxml2-devel patch
可根据自己的需要更改编译选项。
tar jxvf php-5.2.6.tar.bz2
gzip -cd php-5.2.6-fpm-0.5.8.diff.gz | patch -d php-5.2.6 -p1
cd php-5.2.6
./configure \
--prefix=/usr/local/php-fcgi \
--enable-discard-path \
--enable-fastcgi \
--enable-fpm \
--enable-force-cgi-redirect \
--enable-mbstring \
--with-config-file-path=/usr/local/php-fcgi/etc \
--with-gd \
--with-zlib \
--with-mysql \
--with-mysqli
make
make install
cp -f php.ini-recommended /usr/local/php-fcgi/etc/php.ini
cd ..


安装 ZendOptimizer
Zend 的优化器，免费使用，如果加密了 PHP 程序文件，这是必须的。
如果没有使用 Zend 优化器，PHP 进程的内存会难以释放。
下载：http://www.zend.com/en/products/guard/downloads
tar zxvf ZendOptimizer-3.3.3-linux-glibc23-i386.tar.gz
cd ZendOptimizer-3.3.3-linux-glibc23-i386
./install
cd ..


安装 eAccelerator
PHP scripts 的缓存，对于提高 PHP 程序执行速度很有帮助。
下载：http://eaccelerator.net/
tar jxvf eaccelerator-0.9.5.3.tar.bz2
cd eaccelerator-0.9.5.3
/usr/local/php-fcgi/bin/phpize
./configure --enable-eaccelerator=shared --with-php-config=/usr/local/php-fcgi/bin/php-config
make
make install
cd ..


安装 memcache
用于缓存 sql 查询，对于降低数据库压力，提升查询速度有很大好处。
下载：http://pecl.php.net/package/memcache
tar zxvf memcache-2.2.3.tgz
cd memcache-2.2.3
/usr/local/php-fcgi/bin/phpize
./configure --with-php-config=/usr/local/php-fcgi/bin/php-config
make
make install
cd ..


###
安装 Linghttpd's spawn-fcgi
用 Lighttpd 的 spawn-fcgi 来管理 PHP FastCGI 进程。
下载 Lighttpd: http://www.lighttpd.net/download
yum -y install pcre-devel bzip2-devel
(debian: apt-get -y install libpcre3-dev)
tar zxvf lighttpd-1.4.19.tar.bz2
cd lighttpd-1.4.19
./configure
make
cp -a src/spawn-fcgi /usr/local/php-fcgi/bin/
cd ..
###


配置 PHP
vi /usr/local/php-fcgi/etc/php.ini
# 最大执行时间
max_execution_time = 5
# 关闭错误输出
display_errors = Off
# 扩展模块的目录
extension_dir = "/usr/local/php-fcgi/lib/php/extensions/no-debug-non-zts-20060613"
# 关闭 mysql 持久连接。高访问量下会把数据库可用连接用完。
mysql.allow_persistent = Off
# 缩短连接超时时间
mysql.connect_timeout = 10
# session 文件存储目录，这里为两级目录，需要手动创建。
session.save_path = "2;/home/phpsession"
# session 过期时间设为一小时。
session.gc_maxlifetime = 3600
# 关闭
session.bug_compat_42 = 0
session.bug_compat_warn = 0

# 开启 eAccelerator
[eAccelerator]
extension="eaccelerator.so"
# 可使用内存设为了 32M，太大会启动不了 PHP。
eaccelerator.shm_size="32"
eaccelerator.cache_dir="/tmpfs/eaccelerator"
eaccelerator.enable="1"
eaccelerator.optimizer="1"
eaccelerator.check_mtime="1"
eaccelerator.debug="0"
eaccelerator.filter=""
eaccelerator.shm_max="0"
eaccelerator.shm_ttl="0"
eaccelerator.shm_prune_period="0"
eaccelerator.shm_only="0"
eaccelerator.compress="1"
eaccelerator.compress_level="9"

# 在 eAccelerator 之后启用 ZO ，避免 eaccelerator.so 不能加载。
[Zend]
zend_optimizer.optimization_level=1023
zend_extension_manager.optimizer=/usr/local/Zend/lib/Optimizer-3.3.3
zend_optimizer.version=3.3.3
zend_extension=/usr/local/Zend/lib/ZendExtensionManager.so

# 开启 memcache
[memcache]
extension=memcache.so

用 tmpfs 提升性能
mkdir /tmpfs
在 /etc/fstab 中加入
tmpfs                   /tmpfs              tmpfs   size=256m,mode=1777        0 0

mount -a

mkdir /tmpfs/eaccelerator
chown -R nobody:nobody /tmpfs/eaccelerator
chmod -R 1777 /tmpfs/eaccelerator

vi mkdir.sh
#/bin/sh

I="0 1 2 3 4 5 6 7 8 9 a b c d e f"
for acm in $I;
do
for x in $I;
do
mkdir -p /home/phpsession/$acm/$x;
done;
done
chown -R nobody:nobody /home/phpsession
chmod -R 1777 /home/phpsession

chmod +x mkdir.sh
./mkdir.sh


vi /usr/local/php-fcgi/etc/php-fpm.conf
<?xml version="1.0" ?>
<configuration>

        All relative paths in this config are relative to php's install prefix

        <section name="global_options">

                Pid file
                <value name="pid_file">/usr/local/php-fcgi/logs/php-fpm.pid</value>

                Error log file
                <value name="error_log">/usr/local/php-fcgi/logs/php-fpm.log</value>

                Log level
                <value name="log_level">notice</value>

                When this amount of php processes exited with SIGSEGV or SIGBUS ...
                <value name="emergency_restart_threshold">10</value>

                ... in a less than this interval of time, a graceful restart will be initiated.
                Useful to work around accidental curruptions in accelerator's shared memory.
                <value name="emergency_restart_interval">1m</value>

                Time limit on waiting child's reaction on signals from master
                <value name="process_control_timeout">5s</value>

                Set to 'no' to debug fpm
                <value name="daemonize">yes</value>

        </section>

        <workers>

                <section name="pool">

                        Name of pool. Used in logs and stats.
                        <value name="name">default</value>

                        Address to accept fastcgi requests on.
                        Valid syntax is 'ip.ad.re.ss:port' or just 'port' or '/path/to/unix/socket'
                        <value name="listen_address">127.0.0.1:9000</value>

                        <value name="listen_options">

                                Set listen(2) backlog
                                <value name="backlog">-1</value>

                                Set permissions for unix socket, if one used.
                                In Linux read/write permissions must be set in order to allow connections from web server.
                                Many BSD-derrived systems allow connections regardless of permissions.
                                <value name="owner"></value>
                                <value name="group"></value>
                                <value name="mode">0666</value>
                        </value>

                        Additional php.ini defines, specific to this pool of workers.
                        <value name="php_defines">
                                <value name="sendmail_path">/usr/sbin/sendmail -t -i</value>
                                <value name="display_errors">0</value>
                        </value>

                        Unix user of processes
                        <value name="user">www-data</value>

                        Unix group of processes
                        <value name="group">www-data</value>

                        Process manager settings
                        <value name="pm">

                                Sets style of controling worker process count.
                                Valid values are 'static' and 'apache-like'
                                <value name="style">static</value>

                                Sets the limit on the number of simultaneous requests that will be served.
                                Equivalent to Apache MaxClients directive.
                                Equivalent to PHP_FCGI_CHILDREN environment in original php.fcgi
                                Used with any pm_style.
                                <value name="max_children">16</value>

                                Settings group for 'apache-like' pm style
                                <value name="apache_like">

                                        Sets the number of server processes created on startup.
                                        Used only when 'apache-like' pm_style is selected
                                        <value name="StartServers">2</value>

                                        Sets the desired minimum number of idle server processes.
                                        Used only when 'apache-like' pm_style is selected
                                        <value name="MinSpareServers">4</value>

                                        Sets the desired maximum number of idle server processes.
                                        Used only when 'apache-like' pm_style is selected
                                        <value name="MaxSpareServers">16</value>

                                </value>

                        </value>

                        Time limit on waiting execution of single request
                        Should be used when 'max_execution_time' ini option does not terminate execution for some reason
                        <value name="request_execution_timeout">31s</value>

                        Set open file desc rlimit
                        <value name="rlimit_files">65536</value>

                        Set max core size rlimit
                        <value name="rlimit_core">0</value>

                        Chroot to this directory at the start
                        <value name="chroot"></value>

                        Chdir to this directory at the start
                        <value name="chdir"></value>

                        Redirect workers' stdout and stderr into main error log.
                        If not set, they will be redirected to /dev/null, according to FastCGI specs
                        <value name="catch_workers_output">yes</value>

                        How much requests each process should execute before respawn.
                        Useful to work around memory leaks in 3rd party libraries.
                        For endless request processing please specify 0
                        Equivalent to PHP_FCGI_MAX_REQUESTS
                        <value name="max_requests">65536</value>

                        Comma separated list of ipv4 addresses of FastCGI clients that allowed to connect.
                        Equivalent to FCGI_WEB_SERVER_ADDRS environment in original php.fcgi (5.2.2+)
                        Makes sense only with AF_INET listening socket.
                        <value name="allowed_clients">127.0.0.1</value>

                        Pass environment variables like LD_LIBRARY_PATH
                        All $VARIABLEs are taken from current environment
                        <value name="environment">
                                <value name="HOSTNAME">$HOSTNAME</value>
                                <value name="PATH">/usr/local/bin:/usr/bin:/bin</value>
                                <value name="TMP">/tmp</value>
                                <value name="TMPDIR">/tmp</value>
                                <value name="TEMP">/tmp</value>
                                <value name="OSTYPE">$OSTYPE</value>
                                <value name="MACHTYPE">$MACHTYPE</value>
                                <value name="MALLOC_CHECK_">2</value>
                        </value>

                </section>

        </workers>

</configuration>


启动 PHP
/usr/local/php-fcgi/sbin/php-fpm start


安装 Nginx
下载：http://nginx.net/
yum -y install pcre-devel zlib-devel
tar zxvf nginx-0.6.32.tar.gz
cd nginx-0.6.32
./configure \
--user=nobody \
--group=nobody \
--prefix=/usr/local/nginx \
--with-http_stub_status_module
make
make install
cd ..


配置 Nginx
创建相关目录
mkdir /tmp/nginx
chown -R nobody:nobody /tmp/nginx
chmod -R 1777 /tmp/nginx
mkdir /var/log/nginx
cd /usr/local/nginx
mv logs conf/vhosts
cd conf
vi nginx.conf
# 运行 Nginx 的用户
user  nobody nobody;
# Nginx 的进程数
worker_processes  8;

# 错误日志
error_log  /var/log/nginx/error.log;

# pid 文件
pid        /var/run/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process. 
worker_rlimit_nofile 51200;

events {
# 使用 epoll(For Linux Kernel 2.6+) 提升 Nginx 性能。
    use  epoll;
# 最大连接数
    worker_connections  51200;
}


http {
# 包含 mime types 的配置文件
    include       mime.types;
# 默认类型
    default_type  application/octet-stream;

    charset  utf-8;

# 定义 temp 的路径
    client_body_temp_path  /tmp/nginx/client_body_temp;
    proxy_temp_path        /tmp/nginx/proxy_temp;
    fastcgi_temp_path      /tmp/nginx/fastcgi_temp;

# 如果 server_name 定义的域名过多，需要增大这个值
    server_names_hash_bucket_size  128;

# 定义主访问日志格式，因开启了 gzip，加入了 $gzip_ratio
    log_format  main  '$remote_addr - $remote_user [$time_local] $request '
                      '"$status" $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$gzip_ratio"';

# 默认的访问日志存放文件
    access_log  /var/log/nginx/access.log  main;

# Linux Kernel 2.4+ 可通过调用内核级 sendfile() 来提高性能
    sendfile  on;

# FreeBSD 或基于 TCP_CORK 的 Linux 系统可使用
    tcp_nopush on;

# 只在 keep-alive 连接状态中使用
    tcp_nodelay  on;

# 设置保持连接超时时间 和 header 超时时间（单位：秒）
    keepalive_timeout  60 15;

    fastcgi_connect_timeout 60;
    fastcgi_send_timeout 180;
    fastcgi_read_timeout 180;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 4 128k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    fastcgi_temp_path /dev/shm;

# 开启 gzip
    gzip  on;
# 压缩级别 1-9，9 为最高压缩级别
    gzip_comp_level  9;
# 回送给客户端最小的 gzip 压缩大小
    gzip_min_length  1100;
# 设置 gzip 缓存的大小，默认是 4-8k 之间
    gzip_buffers  4 8k;
# gzip http 版本
    gzip_http_version  1.1;
# 需要使用 gzip 压缩的文件类型
    gzip_types  text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;

# 定义默认主机
    server {
# 监听端口
        listen       80;
# 匹配所有域名
        server_name  _;
# 默认首页
        index  index.php;
# 根目录路径
        root  /home/www;
# 执行 php 程序文件的设置
        location ~ .*\.php?$ {
            include  fcgi.conf;
        }
# 对于以下文件不记录访问日志
        location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico)$ {
            access_log  off;
        }
    }

# 包含其它虚拟主机的配置
    include  vhosts/*.conf;
}


vi php-fcgi.conf
fastcgi_pass   php-fcgi;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx;

fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
#fastcgi_param  REDIRECT_STATUS    200;


再来配置 Discuz! 论坛和 SupeSite/X-Space 的虚拟主机
vi vhosts/main.conf
    server {
    listen       80;
# 分论坛可使用子域名
    server_name  bbs.domain.com *.bbs.domain.com;
    index  index.php;
    root  /home/www/bbs;
# 和 Apache Rewrite 规则很相似
    rewrite  ^/archiver/((fid|tid)-[\w\-]+\.html)$ /archiver/index.php?$1;
    rewrite  ^/forum-([0-9]+)-([0-9]+)\.html$ /forumdisplay.php?fid=$1&page=$2;
    rewrite  ^/thread-([0-9]+)-([0-9]+)-([0-9]+)\.html$ /viewthread.php?tid=$1&extra=page\%3D$3&page=$2;
    rewrite  ^/space-(username|uid)-(.+)\.html$ /space.php?action=viewpro&$1=$2;
    rewrite  ^/tag-(.+)\.html$ /tag.php?name=$1;
        location ~ .*\.php?$ {
            include  conf/fcgi.conf;
        }
        location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico)$ {
            access_log  off;
        }
    }

    server {
    listen       80;
    server_name  blog.domain.com;
    index  index.php;
    root  /home/www/blog;
    rewrite  ^([0-9]+)/spacelist(.*)$ index.php?$1/action_spacelist$2;
    rewrite  ^([0-9]+)/viewspace_(.+)$ index.php?$1/action_viewspace_itemid_$2;
    rewrite  ^([0-9]+)/viewbbs_(.+)$ index.php?$1/action_viewbbs_tid_$2;
    rewrite  ^([0-9]+)/(.*)$ index.php?$1/$2;
    rewrite  ^([0-9]+)$ index.php?$1;
    rewrite  ^action_(.+)$ index.php?action_$1;
    rewrite  ^category_(.+)$ index.php?action_category_catid_$1;
    rewrite  ^itemlist_(.+)$ index.php?action_itemlist_catid_$1;
    rewrite  ^viewnews_(.+)$ index.php?action_viewnews_itemid_$1;
    rewrite  ^viewthread_(.+)$ index.php?action_viewthread_tid_$1;
    rewrite  ^index([\.a-zA-Z0-9]*)$ index.php;
    rewrite  ^html/([0-9]+)/viewnews_itemid_([0-9]+)\.html$ index.php?action_viewnews_itemid_$2;

    rewrite  ^/([0-9]+)/spacelist(.+)$ /index.php?uid/$1/action/spacelist/type$2;
    rewrite  ^/([0-9]+)/viewspace(.+)$ /index.php?uid/$1/action/viewspace/itemid$2;
    rewrite  ^/([0-9]+)/viewbbs(.+)$ /index.php?uid/$1/action/viewbbs/tid$2;
    rewrite  ^/([0-9]+)/(.*)$ /index.php?uid/$1/$2;
    rewrite  ^/([0-9]+)$ /index.php?uid/$1;

    rewrite  ^/action(.+)$ /index.php?action$1;
    rewrite  ^/category(.+)$ /index.php?action/category/catid$1;
    rewrite  ^/viewnews(.+)$ /index.php?action/viewnews/itemid$1;
    rewrite  ^/viewthread(.+)$ /index.php?action/viewthread/tid$1;
    rewrite  ^/mygroup(.+)$ /index.php?action/mygroup/gid$1;
# 归档目录的默认首页设置
        location /archiver/ {
            index index.html;
        }
        location ~ .*\.php?$ {
            include  conf/fcgi.conf;
        }
        location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico)$ {
            access_log  off;
        }
    }


启动 PHP 和 Nginx
ulimit -SHn 51200
/usr/local/php-fcgi/bin/spawn-fcgi -a 192.168.0.241 -p 10080 -C 32 -u nobody -g nobody -f /usr/local/php-fcgi/bin/php-cgi
监听在 127.0.0.1 的 10080 端口并开启 32 个进程，使用和 Nginx 一样的 nobody 用户。（PHP5 的执行程序是 php-cgi）
/usr/local/nginx/sbin/nginx -t
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
重启 PHP 进程可以先 killall php 再启动。
重启 Nginx
kill -HUP `cat /var/run/nginx.pid`

vi /etc/sysctl.conf
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.ip_local_port_range = 5000    65000

清除超过一小时没有被访问到的 eAccelerator 缓存文件和创建时间超过一小时的 php session 文件，防止占满空间。
vi /etc/crontab
0 * * * * root find /tmpfs/eaccelerator -type f -amin +60 -exec rm {} \;
0 * * * * root find /tmpfs/phpsession -type f -cmin +60 -exec rm {} \;


配置开机自启动
vi /etc/rc.local
/usr/local/sbin/mkdir.sh
/usr/local/php-fcgi/bin/spawn-fcgi -a 192.168.0.241 -p 10080 -C 32 -u nobody -g nobody -f /usr/local/php-fcgi/bin/php-cgi
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf


方便重启 Nginx
vi ~/.bashrc
alias nginx='kill -HUP `cat /var/run/nginx.pid`'

source ~/.bashrc