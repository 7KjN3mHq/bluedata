配置过程中就包括了 Switchover 的配置。
RAC 为 Primary 时：
RAC 的每个实例都要配置日志发送，目的地都是 Standby ；
日志发送方式为 LGWR ；
Standby 的日志接收方式为 Standby Redo Log ；
启动 MRP 。
RAC 为 Standby 时：
单实例的日志只发送到 RAC 的一个实例；
RAC 的日志接收方式为 Standby Redo Log ；
在 RAC 的一个实例上运行 MRP 。


1. 配置 tnsnames.ora 和 listener.ora 文件：
在 RAC 的 tnsnames.ora 添加：
STANDBY =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.99)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SID = orcl)
    )
  )

单实例的 tnsnames.ora 配置：
ORCL2 =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.82)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = orcl)
      (INSTANCE_NAME = orcl2)
    )
  )

ORCL1 =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.81)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = orcl)
      (INSTANCE_NAME = orcl1)
    )
  )

STANDBY =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.99)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SID = orcl)
    )
  )

单实例的 listener.ora 配置：
LISTENER =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.99)(PORT = 1521))
  )

SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (GLOBAL_DBNAME = orcl)
      (ORACLE_HOME = /opt/oracle/product/10.2)
      (SID_NAME = orcl)
    )
  )

启动单实例的监听： lsnrctl start

检测：
tnsping standby
tnsping orcl1
tnsping orcl2


2. 准备参数文件：
在 RAC 创建 pfile 文件：
SQL> create pfile from spfile;

添加如下参数：
vi $ORACLE_HOME/dbs/initorcl1.ora
*.log_archive_config='dg_config=(orcl,standby)'
*.log_archive_dest_2='service=standby valid_for=(online_logfiles,primary_role) db_unique_name=standby'
*.db_file_name_convert='/opt/oracle/oradata/orcl/datafile','+DATA/orcl/datafile', '/opt/oracle/oradata/orcl/tempfile','+DATA/orcl/tempfile'
*.standby_file_management='AUTO'
*.fal_server='standby'


通过 RAC 参数文件创建单实例的参数文件：
删除所有非 "*" 开头的参数，并删除 RAC 的相关参数：
*.cluster_database_instances=2
*.cluster_database=TRUE
*.db_create_file_dest='+DATA'
*.db_recovery_file_dest='+RECOVERY'
*.db_recovery_file_dest_size=154616725504
*.remote_listener='LISTENERS_ORCL'
修改如下参数：
control_files='/opt/oracle/oradata/orcl/controlfile/control01.ctl','/opt/oracle/recovery/orcl/controlfile/control02.ctl'
log_archive_config='dg_config=(orcl,standby)'
standby_archive_dest='/opt/oracle/recovery/orcl/archivelog'
log_archive_dest_1='location=/opt/oracle/recovery/orcl/archivelog'
log_archive_dest_2='service=orcl1 valid_for=(online_logfiles,primary_role) db_unique_name=orcl'
db_file_name_convert='+DATA/orcl/datafile','/opt/oracle/oradata/orcl/datafile', '+DATA/orcl/tempfile','/opt/oracle/oradata/orcl/tempfile'
log_file_name_convert='+DATA/orcl/onlinelog','/opt/oracle/oradata/orcl/onlinelog', '+RECOVERY/orcl/onlinelog','/opt/oracle/recovery/orcl/onlinelog'
standby_file_management='AUTO'
fal_server='orcl1','orcl2'
fal_client='standby'
thread=1
undo_tablespace='UNDOTBS1'
*.audit_file_dest='/opt/oracle/admin/orcl/adump'
*.background_dump_dest='/opt/oracle/admin/orcl/bdump'
*.core_dump_dest='/opt/oracle/admin/orcl/cdump'
*.user_dump_dest='/opt/oracle/admin/orcl/udump'
添加如下参数：
db_unique_name='standby'


3. 在 RAC 上进行备份并创建 Standby 的控制文件，传送到单实例主机上：
备份：
RMAN> run{
allocate channel c1 type disk format '/oracle/orabackup/%d_%T_%s.bkp';
backup database;
}

在 RAC 的所有实例上进行几次归档后创建 Standby 控制文件：
SQL> alter system archive log current;
SQL> alter database create standby controlfile as '/oracle/orabackup/stb.ctl';

cd /oracle/orabackup
scp ORCL_20091013_107.bkp stb.ctl 192.168.0.99:/opt/oracle/orabackup/


4. 利用 RMAN 创建 Standby 数据库：
在备库创建相应目录：
mkdir -p ~/admin/orcl/{a,b,c,u}dump
mkdir -p ~/oradata/orcl/{controlfile,datafile,onlinelog,tempfile}
mkdir -p ~/recovery/orcl/{archivelog,controlfile,onlinelog}

在单实例主机上创建到备份路径的链接：
su - root
mkdir /oracle
ln -s /opt/oracle/orabackup /oracle/orabackup

在备库创建密码文件：
cd ~/product/10.2/dbs
orapwd password=<password> file=orapworcl entries=5

启动备库到 nomount 状态：
SQL> startup pfile='/opt/oracle/product/10.2/dbs/initorcl.ora' nomount;

创建 spfile 文件：
SQL> create spfile from pfile='/opt/oracle/product/10.2/dbs/initorcl.ora';

在 RAC 上利用 RMAN 创建 Standby 数据库：
rman target / auxiliary sys/<password>@standby
RMAN> duplicate target database for standby;

检查 Standby 数据库：
检查状态：
SQL> select status from v$instance;
检查日志文件：
SQL> select member from v$logfile;
检查数据文件：
SQL> select name from v$datafile;
检查零时文件：
SQL> select name from v$tempfile;


5. 创建 Standby Redo Log 日志：
Standby Redo Log 的组数一般为 (N +1)*thread# （ N 为每个 thread# 的联机日志组数），大小必须和联机日志一样。
创建存放日志的目录：
mkdir ~/oradata/orcl/standbyredo
查看 RAC 中的联机日志：
SQL> select thread#,group#,bytes/1024/1024 from v$log;
RAC 有两个 Redo Thread ，每个 Thread 有两个日志组，需要对每个 Thread 创建三组 Standby Redo Log:
SQL> alter database add standby logfile thread 1 group 5 ('/opt/oracle/oradata/orcl/standbyredo/stb_1_5.log') size 50m;
SQL> alter database add standby logfile thread 1 group 6 ('/opt/oracle/oradata/orcl/standbyredo/stb_1_6.log') size 50m;
SQL> alter database add standby logfile thread 1 group 7 ('/opt/oracle/oradata/orcl/standbyredo/stb_1_7.log') size 50m;
SQL> alter database add standby logfile thread 2 group 8 ('/opt/oracle/oradata/orcl/standbyredo/stb_2_8.log') size 100m;
SQL> alter database add standby logfile thread 2 group 9 ('/opt/oracle/oradata/orcl/standbyredo/stb_2_9.log') size 100m;
SQL> alter database add standby logfile thread 2 group 10 ('/opt/oracle/oradata/orcl/standbyredo/stb_2_10.log') size 100m;
检查：
SQL> select member from v$logfile;


6. 开始同步：
用修改后的 spfile 启动 RAC 的所有实例：
SQL> create spfile='+DATA/orcl/spfileorcl.ora' from pfile='/oracle/product/database/dbs/initorcl1.ora';
修改 initorcl1.ora 和 initorcl2.ora 为：
SPFILE='+DATA/orcl/spfileorcl.ora'
srvctl stop database -d orcl
srvctl start database -d orcl
在 Standby 上启动 MRP:
SQL> recover managed standby database disconnect from session;
在 RAC 各个实例上查看日志传送状况：
SQL> select dest_name,status,error from v$archive_dest;
确认同步：
在 RAC 某个实例上执行：
SQL> create tablespace test datafile size 10m;
在 RAC 的每个实例执行：
SQL> alter system switch logfile;
在 Standby 确认文件产生：
SQL> select name from v$datafile;


7. 切换：
RAC 切换时只能有一个实例活动，其它实例必须关闭：
srvctl stop instance -d orcl -i orcl2
在 rac1 上执行：
SQL> alter database commit to switchover to physical standby with session shutdown;
在 Standby 上执行：
SQL> alter database commit to switchover to primary with session shutdown;
在 rac1 上创建 Standby Redo Log:
SQL> startup mount;
SQL> alter database add standby logfile thread 1 group 5 size 50m;
SQL> alter database add standby logfile thread 1 group 6 size 50m;
SQL> alter database add standby logfile thread 1 group 7 size 50m;
SQL> alter database add standby logfile thread 2 group 8 size 100m;
SQL> alter database add standby logfile thread 2 group 9 size 100m;
SQL> alter database add standby logfile thread 2 group 10 size 100m;
开始同步，在 rac1 上执行（ MRP 只能在一个实例上执行）：
SQL> recover managed standby database disconnect from session;
确认同步，在 Standby 上执行：
SQL> alter database open;
SQL> create tablespace tmp datafile '/opt/oracle/oradata/orcl/datafile/tmp.dbf' size 10m;
SQL> alter system switch logfile;
在 rac1 上确认：
SQL> select name from v$datafile;

之后，可以自由切换了。切换 RAC 为主库：
在 Standby 上执行：
SQL> alter database commit to switchover to physical standby with session shutdown;
在 rac1 上执行：
SQL> alter database commit to switchover to primary with session shutdown;
在 Standby 上启动 MRP:
SQL> startup mount;
SQL> recover managed standby database disconnect from session;
打开 rac1:
SQL> alter database open;
启动 rac2:
srvctl start instance -d orcl -i orcl2