　　我们经常会在UNIX系统下的一些脚本中看到类似”2>&1″这样的用法，例如“/path/to/prog 2>&1 > /dev/null &”，那么它的具体含义是什么呢？
　　UNIX有几种输入输出流，它们分别与几个数字有如下的对应关系：0-标准输入流(stdin)，1-标准输出流(stdout)，2-标准错误流(stderr)。”2>&1″的意思就是将stderr重定向至stdout，并一起在屏幕上显示出来。如果不加数字，那么默认的重定向动作是针对stdout(1)的，比如”ls -l > result”就等价于”ls -l 1 > result”。这样便于我们更普遍性的理解重定向过程。
　　下面举例说明：
#cat std.sh
#!/bin/sh
echo “stdout”
echo “stderr” >&2
#/bin/sh std.sh 2>&1 > /dev/null
stderr
#/bin/sh std.sh > /dev/null 2>&1
　　第一条命令的输出结果是stderr，因为stdout和stderr合并后一同重定向到/dev/null，但stderr并未被清除，因此仍将在屏幕中显示出来；第二条命令无输出，因为当stdout重定向至/dev/null后，stderr又重定向到了stdout，这样stderr也被输出到了/dev/null。