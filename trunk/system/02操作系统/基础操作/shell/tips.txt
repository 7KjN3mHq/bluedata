统计重复次数并排序：
awk '{print $1}' file.txt | sort | uniq -c | sort -r

最后一行大于 60 即打印一整行：
awk '{if($NF>60){print $0}}' file.txt

生成随机密码：
cat /dev/urandom | head -1 | md5sum | head -c 6

查看某列大于一个值的行：
tail -f /var/log/nginx/access.log | awk '{if($11 > 0.100) print $_'}

替换文件中的指定字串：
sed -i 's/192.168.0.10 00:1A:4B:A9:D1:5E/192.168.0.10 00:1A:4B:CF:23:A0/' /etc/ethers
sed -i 's/etch/testing/g' /etc/apt/sources.list
遇到换行可用 \n 表示。

cut -d '分隔字符' -f fields
参数：
-d: 后面接分隔字符，与-f一起使用
-f: 依据-d的分隔字符将一段信息分割成为数据,用-f取取第几段的意思
-c: 以字符(characters)的单位取出固定字符的区间
例如：
cat /etc/passwd | cut -d ':' -f 1

grep 多条件检索
grep -E "one|two|three"

IP 地址排序
sort -n -t. +0 -1 +1 -2 +2 -3 +3 -4 ip.txt

数据流重定向
UNIX 有几种输入输出流，它们分别与几个数字有如下的对应关系：
0-标准输入流 (stdin)
1-标准输出流 (stdout)
2-标准错误流 (stderr)
"2>&1" 的意思就是将 stderr 重定向至 stdout 并一起在屏幕上显示出来。
如果不加数字，那么默认的重定向动作是针对 stdout(1) 的。
举例说明：
cat std.sh
#!/bin/sh
echo "stdout"
echo "stderr" >&2

/bin/sh std.sh 2>&1 > /dev/null
输出结果是 stderr ，因为 stdout 和 stderr 合并后一同重定向到 /dev/null ，但 stderr 并未被清除，因此仍将在屏幕中显示出来。

/bin/sh std.sh > /dev/null 2>&1
无输出，因为当 stdout 重定向至 /dev/null 后， stderr 又重定向到了 stdout ，这样 stderr 也被输出到了 /dev/null 。


统计一个目录下子目录内的文件数量
for x in `ls -l /home/xnjcw_branch/test/template_1 | grep ^d | awk '{print $9}'` ; do
dir="/home/xnjcw_branch/test/template_1/"$x
i=`ls -l $dir | wc -l`
let "i=i-1"
echo $dir >> ~/nums.txt
echo $i >> ~/nums.txt
done


删除2004年的文件
unset LANG
ls -l | awk '{print $8,$9}' | grep ^2004 | awk '{print $2}' | xargs rm


统计一个目录下子目录的大小
#!/bin/sh
dir=$1
ls -l $dir | awk '{print $9}' | while read x; do
du -sm $dir/$x >> spaces.txt
done


记录两个文件相同的行
#!/bin/bash
while read x ; do
  while read i ; do
    if [ $x == $i ]
    then
      echo $x >> tmp.txt
      braek
    fi
  done < backup.txt
done < other.txt


统计一个目录下以"_"分隔的不同前缀名文件的数目
ll | awk '{print $9}' | cut -d _ -f 1 | uniq -c